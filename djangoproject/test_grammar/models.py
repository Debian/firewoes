# Django modelisation of the Firehose grammar
# Inspired of firehose-orm:
# https://github.com/davidmalcolm/firehose-orm/blob/master/orm.py


from django.db import models

# TODO: Metadata() in SQLAlchemy -> subclass Meta in Django
# TODO: get_absolute_url()
# TODO: precise the max_lengths
# TODO: help_text=...
# TODO: verbose_name_plural (for autogenerated admin)

# use a string instead of this?
class Message(models.Model):
    """a message given by the tool"""
    text = models.TextField()
    
    def __unicode__(self):
        return self.text[:15]

class Notes(models.Model):
    """additional notes, eg diff"""
    text = models.TextField()
    
    def __unicode__(self):
        return self.text[:15]
# //

class Hash(models.Model):
    """the hash result of a particular file"""
    alg = models.CharField(max_length=200)
    hexdigest = models.TextField(max_length=1000)
    
    def __unicode__(self):
        return self.alg + ": " + self.hexdigest[:15]

class File(models.Model):
    """a source file"""
    givenpath = models.CharField(max_length=200)
    abspath = models.CharField(max_length=200, blank=True)
    hash = models.ForeignKey(Hash, blank=True, null=True)
    
    def __unicode__(self):
        return self.givenpath

class Function(models.Model):
    """a particular function in the source code"""
    name = models.CharField(max_length=200)
    
    def __unicode__(self):
        return self.name

class Point(models.Model):
    """a place in a text file"""
    line = models.IntegerField()
    column = models.IntegerField()
    
    def __unicode__(self):
        return self.line + ":" + self.column

class Range(models.Model):
    """a sub-string in a text file, represented by 2 points"""
    start = models.ForeignKey(Point, related_name='range_start')
    end = models.ForeignKey(Point, related_name='range_end')
    
    def __unicode__(self):
        return self.start + " to " + self.end

class Customfields(models.Model):
    """a set of key/value pairs"""

class Customfield(models.Model):
    """a key/value pair"""
    customfields = models.ForeignKey(Customfields)

class Intfield(Customfield):
    """a key/(int)value pair"""
    name = models.CharField(max_length=200)
    value = models.IntegerField()
    
    def __unicode__(self):
        return self.name + " = " + self.value

class Strfield(Customfield):
    """a key/(string)value pair"""
    name = models.CharField(max_length=200)
    value = models.CharField(max_length=200)
    
    def __unicode__(self):
        return self.name + " = " + self.value

class Location(models.Model):
    """a place in the code, defined by a file/function/place"""
    file = models.ForeignKey(File)
    function = models.ForeignKey(Function, blank=True, null=True)
    # either point or range
    point = models.ForeignKey(Point, blank=True, null=True)
    range = models.ForeignKey(Range, blank=True, null=True)
    
    def __unicode__(self):
        place = self.point if self.point != None else self.range
        return self.file + ":" + self.function + ":" + place

class Trace(models.Model):
    """an execution/error trace, a list of states"""

class State(models.Model):
    """part of a trace"""
    trace = models.ForeignKey(Trace)
    location = models.ForeignKey(Location)
    notes = models.ForeignKey(Notes, blank=True, null=True)
    # we use customfields for the annotations (key/value pairs):
    annotations = models.ForeignKey(Customfields, blank=True, null=True)
    
    def __unicode__(self):
        return self.location + " (" + self.notes[:15] + ")"

class Generator(models.Model):
    """the static analysis tool"""
    name = models.CharField(max_length=200)
    version = models.CharField(max_length=200, blank=True)
    
    def __unicode__(self):
        if self.version:
            return self.name + ": " + self.version
        else:
            return self.name

# single-table inheritance (like firehose-orm)
class Sut(models.Model): # sut = software under test
    """the software being tested"""
    SUT_TYPES = (
        ('source-rpm', 'source-rpm'),
        ('debian-source', 'debian-source'),
        ('debian-binary', 'debian-binary'),
        )
    type = models.CharField(max_length=15, choices=SUT_TYPES)
    name = models.CharField(max_length=200)
    version = models.CharField(max_length=200)
    # optional for debian-src/bin:
    release = models.CharField(max_length=200, blank=True)
    # not for debian-src:
    buildarch = models.CharField(max_length=200, blank=True)
    # -> ForeignKey for the archs?
    
    def __unicode__(self):
        sutcode = self.name + " " + self.version
        if self.release:
            sutcode += " (" + self.release + ")"
        if self.buildarch:
            sutcode += " (" + self.buildarch + ")"
        return sutcode

class Stats(models.Model):
    """the execution time of the tool"""
    wallclocktime = models.FloatField()
    
    def __unicode__(self):
        return self.wallclocktime

class Metadata(models.Model):
    """groups all data that is parallel to the concrete results"""
    generator = models.ForeignKey(Generator)
    sut = models.ForeignKey(Sut)
    file = models.ForeignKey(File, blank=True, null=True)
    stats = models.ForeignKey(Stats, blank=True, null=True)
    
    def __unicode__(self):
        return self.generator + " - " \
            + self.sut + " - " \
            + self.file + " - " \
            + self.stats

class Analysis(models.Model):
    """a run from an analysis tool"""
    metadata = models.ForeignKey(Metadata)
    customfields = models.ForeignKey(Customfields, blank=True, null=True)
    
    def __unicode__(self):
        return str(self.id)

class Result(models.Model):
    """a result from an analysis,
    can be an issue, an info or a failure"""
    analysis = models.ForeignKey(Analysis)
    
    # def __unicode__(self):
    #     if hasattr(self, 'info'):
    #         return self.info.__unicode__()
    #     else:
    #         return "test"
    
# multi-table inheritance (one-to-one field automatically provided by Django)
class Issue(Result):
    """a common result from an analysis tool,
    which has found an error in the code"""
    cwe = models.IntegerField(blank=True, null=True)
    testid = models.CharField(max_length=200, blank=True)
    location = models.ForeignKey(Location)
    message = models.ForeignKey(Message)
    notes = models.ForeignKey(Notes, blank=True, null=True)
    trace = models.ForeignKey(Trace, blank=True, null=True)
    severity = models.CharField(max_length=200, blank=True)
    customfields = models.ForeignKey(Customfields, blank=True, null=True)
    
    def __unicode__(self):
        return "issue " + str(self.id)

class Failure(Result):
    """if an analysis tool fails"""
    failureid = models.CharField(max_length=200, blank=True)
    location = models.ForeignKey(Location, blank=True, null=True)
    message = models.ForeignKey(Message, blank=True, null=True)
    customfields = models.ForeignKey(Customfields, blank=True, null=True)
    
    def __unicode__(self):
        return "failure " + str(self.id)

class Info(Result):
    """not an error in the source code, but a result from a tool,
    for example a licensing problem"""
    infoid = models.CharField(max_length=200, blank=True)
    location = models.ForeignKey(Location, blank=True, null=True)
    message = models.ForeignKey(Message, blank=True, null=True)
    customfields = models.ForeignKey(Customfields, blank=True, null=True)
    
    def __unicode__(self):
        return "info " + str(self.id)
